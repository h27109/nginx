# 生产环境 Nginx JSON Hash 模块配置示例
# 适用于高并发、高可用的API网关场景

user nginx;
worker_processes auto;
worker_cpu_affinity auto;
worker_rlimit_nofile 65535;

error_log /var/log/nginx/error.log warn;
pid /var/run/nginx.pid;

events {
    worker_connections 65535;
    use epoll;
    multi_accept on;
}

http {
    include /etc/nginx/mime.types;
    default_type application/octet-stream;
    
    # 日志格式
    log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                    '$status $body_bytes_sent "$http_referer" '
                    '"$http_user_agent" "$http_x_forwarded_for" '
                    'rt=$request_time uct="$upstream_connect_time" '
                    'uht="$upstream_header_time" urt="$upstream_response_time"';
    
    log_format json_hash '$remote_addr - $remote_user [$time_local] "$request" '
                        '$status $body_bytes_sent rt=$request_time '
                        'upstream_addr="$upstream_addr" '
                        'upstream_status="$upstream_status" '
                        'upstream_response_time="$upstream_response_time"';

    access_log /var/log/nginx/access.log main;
    
    # 基础优化
    sendfile on;
    tcp_nopush on;
    tcp_nodelay on;
    keepalive_timeout 65;
    keepalive_requests 100;
    
    # Gzip配置
    gzip on;
    gzip_vary on;
    gzip_min_length 1024;
    gzip_comp_level 6;
    gzip_types
        text/plain
        text/css
        text/xml
        text/javascript
        application/json
        application/javascript
        application/xml+rss
        application/atom+xml
        image/svg+xml;
    
    # 客户端配置
    client_max_body_size 10m;
    client_body_buffer_size 128k;
    client_header_buffer_size 32k;
    large_client_header_buffers 4 32k;
    client_body_timeout 30s;
    client_header_timeout 30s;
    
    # 代理配置
    proxy_connect_timeout 30s;
    proxy_send_timeout 60s;
    proxy_read_timeout 60s;
    proxy_buffer_size 16k;
    proxy_buffers 4 32k;
    proxy_busy_buffers_size 64k;
    proxy_temp_file_write_size 64k;
    proxy_max_temp_file_size 1024m;
    
    # 上游服务器配置 - 用户服务
    upstream user_service {
        # JSON Hash配置 - 基于user_id进行一致性哈希
        json_hash user_id consistent;
        
        # 性能优化配置
        json_hash_virtual_nodes 500;           # 虚拟节点数量
        json_hash_method murmur3;               # 使用MurmurHash3算法
        json_hash_max_size 5m;                  # 最大JSON大小5MB
        json_hash_max_virtual_memory 8m;        # 虚拟节点最大内存8MB
        
        # 安全配置
        json_hash_max_depth 16;                 # JSON最大嵌套深度
        json_hash_check_content_type on;        # 检查Content-Type
        json_hash_fallback_key "anonymous";     # 匿名用户fallback
        
        # 监控配置
        json_hash_stats_interval 60000;         # 1分钟统计间隔
        
        # 后端服务器
        server 10.0.1.10:8080 weight=3 max_fails=3 fail_timeout=30s;
        server 10.0.1.11:8080 weight=3 max_fails=3 fail_timeout=30s;
        server 10.0.1.12:8080 weight=2 max_fails=3 fail_timeout=30s;
        server 10.0.1.13:8080 backup;
        
        # 连接池配置
        keepalive 32;
        keepalive_requests 100;
        keepalive_timeout 60s;
    }
    
    # 上游服务器配置 - 订单服务
    upstream order_service {
        # 基于order_id进行哈希
        json_hash order_id consistent;
        
        # 优化配置
        json_hash_virtual_nodes 300;
        json_hash_method crc32;
        json_hash_max_size 2m;
        json_hash_max_depth 12;
        json_hash_fallback_key "guest_order";
        json_hash_stats_interval 30000;
        
        server 10.0.2.10:8080 weight=2;
        server 10.0.2.11:8080 weight=2;
        server 10.0.2.12:8080 weight=1;
        server 10.0.2.13:8080 backup;
        
        keepalive 16;
    }
    
    # 上游服务器配置 - 支付服务（不使用JSON Hash）
    upstream payment_service {
        least_conn;
        
        server 10.0.3.10:8080;
        server 10.0.3.11:8080;
        server 10.0.3.12:8080 backup;
        
        keepalive 8;
    }
    
    # 限流配置
    limit_req_zone $binary_remote_addr zone=api_limit:10m rate=100r/s;
    limit_req_zone $server_name zone=server_limit:10m rate=1000r/s;
    
    # 主服务器配置
    server {
        listen 80;
        listen [::]:80;
        server_name api.example.com;
        
        # 重定向到HTTPS
        return 301 https://$server_name$request_uri;
    }
    
    server {
        listen 443 ssl http2;
        listen [::]:443 ssl http2;
        server_name api.example.com;
        
        # SSL配置
        ssl_certificate /etc/ssl/certs/api.example.com.crt;
        ssl_certificate_key /etc/ssl/private/api.example.com.key;
        ssl_session_cache shared:SSL:50m;
        ssl_session_timeout 1d;
        ssl_session_tickets off;
        
        # 现代SSL配置
        ssl_protocols TLSv1.2 TLSv1.3;
        ssl_ciphers ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384;
        ssl_prefer_server_ciphers off;
        
        # HSTS
        add_header Strict-Transport-Security "max-age=63072000" always;
        
        # 安全头
        add_header X-Frame-Options DENY always;
        add_header X-Content-Type-Options nosniff always;
        add_header X-XSS-Protection "1; mode=block" always;
        add_header Referrer-Policy "strict-origin-when-cross-origin" always;
        
        # 访问日志
        access_log /var/log/nginx/api_access.log json_hash;
        
        # 健康检查
        location /health {
            access_log off;
            return 200 "healthy\n";
            add_header Content-Type text/plain;
        }
        
        # 状态监控
        location /nginx_status {
            stub_status on;
            access_log off;
            allow 10.0.0.0/8;
            allow 172.16.0.0/12;
            allow 192.168.0.0/16;
            deny all;
        }
        
        # 用户服务API
        location /api/v1/users/ {
            # 限流
            limit_req zone=api_limit burst=20 nodelay;
            limit_req zone=server_limit burst=100 nodelay;
            
            # 代理配置
            proxy_pass http://user_service;
            proxy_http_version 1.1;
            proxy_set_header Connection "";
            
            # 标准代理头
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_set_header X-Forwarded-Host $host;
            proxy_set_header X-Forwarded-Port $server_port;
            
            # 缓存控制
            proxy_set_header Cache-Control "no-cache";
            
            # 超时配置
            proxy_connect_timeout 10s;
            proxy_send_timeout 30s;
            proxy_read_timeout 30s;
            
            # 错误处理
            proxy_next_upstream error timeout invalid_header http_500 http_502 http_503;
            proxy_next_upstream_tries 3;
            proxy_next_upstream_timeout 30s;
        }
        
        # 订单服务API
        location /api/v1/orders/ {
            limit_req zone=api_limit burst=15 nodelay;
            
            proxy_pass http://order_service;
            proxy_http_version 1.1;
            proxy_set_header Connection "";
            
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            
            proxy_connect_timeout 15s;
            proxy_send_timeout 45s;
            proxy_read_timeout 45s;
            
            proxy_next_upstream error timeout http_500 http_502 http_503;
        }
        
        # 支付服务API
        location /api/v1/payments/ {
            limit_req zone=api_limit burst=10 nodelay;
            
            proxy_pass http://payment_service;
            proxy_http_version 1.1;
            proxy_set_header Connection "";
            
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            
            # 支付接口更严格的超时
            proxy_connect_timeout 5s;
            proxy_send_timeout 20s;
            proxy_read_timeout 20s;
        }
        
        # 静态文件缓存
        location ~* \.(jpg|jpeg|png|gif|ico|css|js|pdf|txt)$ {
            expires 1y;
            add_header Cache-Control "public, immutable";
            add_header X-Content-Type-Options nosniff;
        }
        
        # 默认错误页面
        error_page 404 /404.html;
        error_page 500 502 503 504 /50x.html;
        
        location = /50x.html {
            root /usr/share/nginx/html;
        }
    }
    
    # 内网管理接口
    server {
        listen 127.0.0.1:8080;
        server_name localhost;
        
        access_log /var/log/nginx/admin_access.log;
        
        # 管理接口，仅允许本地访问
        location /admin/ {
            allow 127.0.0.1;
            allow 10.0.0.0/8;
            deny all;
            
            # 这里可以添加管理功能
            return 200 "Admin interface";
            add_header Content-Type text/plain;
        }
        
        # 详细状态信息
        location /status {
            stub_status on;
            access_log off;
        }
    }
}

# Stream模块配置（TCP负载均衡）
stream {
    log_format proxy '$remote_addr [$time_local] '
                    '$protocol $status $bytes_sent $bytes_received '
                    '$session_time "$upstream_addr" '
                    '"$upstream_bytes_sent" "$upstream_bytes_received" "$upstream_connect_time"';
    
    access_log /var/log/nginx/stream_access.log proxy;
    error_log /var/log/nginx/stream_error.log;
    
    # TCP负载均衡示例
    upstream database_pool {
        server 10.0.4.10:5432 weight=2;
        server 10.0.4.11:5432 weight=1;
        server 10.0.4.12:5432 backup;
    }
    
    server {
        listen 5432;
        proxy_pass database_pool;
        proxy_timeout 1s;
        proxy_responses 1;
        proxy_connect_timeout 1s;
    }
} 