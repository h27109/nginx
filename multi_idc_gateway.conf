# 多IDC接入网关配置
worker_processes auto;
worker_rlimit_nofile 65535;
error_log /var/log/nginx/error.log warn;
pid /var/run/nginx.pid;

events {
    worker_connections 10240;
    use epoll;
    multi_accept on;
}

http {
    include /etc/nginx/mime.types;
    default_type application/octet-stream;
    
    # 日志格式定义
    log_format gateway_log '$remote_addr - $remote_user [$time_local] "$request" '
                          '$status $body_bytes_sent "$http_referer" '
                          '"$http_user_agent" "$http_x_forwarded_for" '
                          'user_id="$user_id" upstream="$upstream_addr" '
                          'response_time=$request_time upstream_time=$upstream_response_time';
    
    access_log /var/log/nginx/gateway_access.log gateway_log;
    
    # 基础性能优化
    sendfile on;
    tcp_nopush on;
    tcp_nodelay on;
    keepalive_timeout 65;
    client_max_body_size 10m;
    client_body_timeout 30s;
    client_header_timeout 30s;
    
    # Gzip压缩
    gzip on;
    gzip_types text/plain application/json application/xml text/css text/js application/javascript;
    
    # 限流配置
    limit_req_zone $binary_remote_addr zone=global_limit:10m rate=100r/s;
    limit_req_zone $user_id zone=user_limit:10m rate=50r/s;
    
    # 定义用户ID提取
    map $request_body $user_id {
        default "";
        "~\"user_id\":\s*\"?([^,\"}\s]+)" $1;
    }
    
    # IDC1 - 北京机房
    upstream idc_beijing {
        json_hash user_id consistent;
        
        # 北京机房内部负载均衡器
        server 10.1.1.100:80 weight=5 max_fails=3 fail_timeout=30s;
        server 10.1.1.101:80 weight=5 max_fails=3 fail_timeout=30s;
        
        # 备用服务器（低权重）
        server 10.1.1.102:80 weight=1 max_fails=2 fail_timeout=15s backup;
        
        keepalive 100;
        keepalive_requests 1000;
        keepalive_timeout 60s;
    }
    
    # IDC2 - 上海机房
    upstream idc_shanghai {
        json_hash user_id consistent;
        
        server 10.2.1.100:80 weight=5 max_fails=3 fail_timeout=30s;
        server 10.2.1.101:80 weight=5 max_fails=3 fail_timeout=30s;
        server 10.2.1.102:80 weight=1 max_fails=2 fail_timeout=15s backup;
        
        keepalive 100;
        keepalive_requests 1000;
        keepalive_timeout 60s;
    }
    
    # IDC3 - 深圳机房
    upstream idc_shenzhen {
        json_hash user_id consistent;
        
        server 10.3.1.100:80 weight=5 max_fails=3 fail_timeout=30s;
        server 10.3.1.101:80 weight=5 max_fails=3 fail_timeout=30s;
        server 10.3.1.102:80 weight=1 max_fails=2 fail_timeout=15s backup;
        
        keepalive 100;
        keepalive_requests 1000;
        keepalive_timeout 60s;
    }
    
    # 全局后备upstream（所有IDC）
    upstream idc_global_fallback {
        # 当主IDC不可用时的全局负载均衡
        server 10.1.1.100:80 weight=3;
        server 10.2.1.100:80 weight=3;
        server 10.3.1.100:80 weight=3;
        server 10.1.1.101:80 weight=2;
        server 10.2.1.101:80 weight=2;
        server 10.3.1.101:80 weight=2;
    }
    
    # 按用户ID分片的映射规则
    map $user_id $target_idc {
        default "global";
        # 用户ID模3分片
        # 0,3,6,9... -> 北京
        "~^[0369]" "beijing";
        "~.*[0369]$" "beijing"; 
        
        # 1,4,7... -> 上海  
        "~^[147]" "shanghai";
        "~.*[147]$" "shanghai";
        
        # 2,5,8... -> 深圳
        "~^[258]" "shenzhen";
        "~.*[258]$" "shenzhen";
    }
    
    # 健康检查服务器
    server {
        listen 8080;
        server_name localhost;
        
        location /health {
            access_log off;
            return 200 "healthy\n";
            add_header Content-Type text/plain;
        }
        
        location /nginx_status {
            stub_status on;
            access_log off;
            allow 127.0.0.1;
            allow 10.0.0.0/8;
            deny all;
        }
    }
    
    # 主服务配置
    server {
        listen 80;
        listen 443 ssl http2;
        server_name gateway.yourcompany.com;
        
        # SSL配置
        ssl_certificate /etc/nginx/ssl/gateway.crt;
        ssl_certificate_key /etc/nginx/ssl/gateway.key;
        ssl_protocols TLSv1.2 TLSv1.3;
        ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384;
        ssl_prefer_server_ciphers off;
        
        # 安全头
        add_header X-Frame-Options DENY;
        add_header X-Content-Type-Options nosniff;
        add_header X-XSS-Protection "1; mode=block";
        
        # 限流
        limit_req zone=global_limit burst=200 nodelay;
        limit_req zone=user_limit burst=100 nodelay;
        
        # API路由 - 按用户ID分发到不同IDC
        location /api/ {
            # 确保读取完整请求体以提取user_id
            client_body_in_file_only clean;
            client_body_buffer_size 1m;
            
            # 根据用户ID路由到不同IDC
            if ($target_idc = "beijing") {
                proxy_pass http://idc_beijing;
            }
            if ($target_idc = "shanghai") {
                proxy_pass http://idc_shanghai;
            }
            if ($target_idc = "shenzhen") {
                proxy_pass http://idc_shenzhen;
            }
            if ($target_idc = "global") {
                proxy_pass http://idc_global_fallback;
            }
            
            # 代理配置
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_set_header X-User-ID $user_id;
            proxy_set_header X-Target-IDC $target_idc;
            
            # 超时设置
            proxy_connect_timeout 5s;
            proxy_send_timeout 60s;
            proxy_read_timeout 60s;
            
            # 重试配置
            proxy_next_upstream error timeout http_500 http_502 http_503 http_504;
            proxy_next_upstream_tries 2;
            proxy_next_upstream_timeout 10s;
            
            # 缓冲配置
            proxy_buffering on;
            proxy_buffer_size 8k;
            proxy_buffers 8 8k;
            
            # 错误处理
            error_page 502 503 504 =200 @fallback;
        }
        
        # 静态资源（可选，如果需要）
        location /static/ {
            # 静态资源可以就近分发或使用CDN
            proxy_pass http://idc_global_fallback;
            proxy_cache_valid 200 1h;
        }
        
        # 故障切换处理
        location @fallback {
            internal;
            proxy_pass http://idc_global_fallback;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Fallback "true";
        }
        
        # 监控和诊断接口
        location /gateway/status {
            allow 127.0.0.1;
            allow 10.0.0.0/8;
            deny all;
            
            content_by_lua_block {
                ngx.say("Gateway Status: OK")
                ngx.say("User ID: ", ngx.var.user_id or "not_found")
                ngx.say("Target IDC: ", ngx.var.target_idc or "unknown")
                ngx.say("Timestamp: ", ngx.time())
            }
        }
    }
}

# Stream模块配置（如果需要TCP代理）
stream {
    upstream tcp_idc_beijing {
        server 10.1.1.100:3306 weight=5;
        server 10.1.1.101:3306 weight=5;
    }
    
    upstream tcp_idc_shanghai {
        server 10.2.1.100:3306 weight=5;
        server 10.2.1.101:3306 weight=5;
    }
    
    upstream tcp_idc_shenzhen {
        server 10.3.1.100:3306 weight=5;
        server 10.3.1.101:3306 weight=5;
    }
    
    # MySQL代理示例
    server {
        listen 3306;
        proxy_pass tcp_idc_beijing;  # 可以根据需要动态选择
        proxy_timeout 30s;
        proxy_connect_timeout 5s;
    }
} 