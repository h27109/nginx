# nginx JSON Hash 负载均衡模块配置示例

# 定义upstream组，使用json_hash进行负载均衡
upstream backend_servers {
    # 使用json_hash指令，根据JSON body中的"user_id"字段进行hash分流
    json_hash user_id;
    
    # 定义后端服务器
    server 192.168.1.10:8080 weight=3;
    server 192.168.1.11:8080 weight=2;
    server 192.168.1.12:8080 weight=1;
    server 192.168.1.13:8080 backup;
}

# 一致性hash示例
upstream backend_consistent {
    # 使用一致性hash，在服务器增减时保持更好的分布稳定性
    json_hash user_id consistent;
    
    server 192.168.1.20:8080;
    server 192.168.1.21:8080;
    server 192.168.1.22:8080;
}

server {
    listen 80;
    server_name example.com;
    
    location /api/ {
        # 代理到使用JSON hash的upstream
        proxy_pass http://backend_servers;
        
        # 必要的proxy设置
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        
        # 确保请求体被读取
        proxy_request_buffering on;
        
        # 设置超时时间
        proxy_connect_timeout 30s;
        proxy_send_timeout 30s;
        proxy_read_timeout 30s;
    }
    
    location /consistent/ {
        # 使用一致性hash的upstream
        proxy_pass http://backend_consistent;
        
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        
        proxy_request_buffering on;
    }
}

# 错误日志配置，便于调试
error_log /var/log/nginx/error.log debug;

# 示例请求体格式:
# POST /api/some-endpoint HTTP/1.1
# Host: example.com
# Content-Type: application/json
# Content-Length: 45
#
# {
#   "user_id": "12345",
#   "action": "login",
#   "timestamp": 1703123456
# }
#
# 该请求会根据"user_id": "12345"进行hash计算，
# 相同user_id的请求总是被分配到同一台服务器 