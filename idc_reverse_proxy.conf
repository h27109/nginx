# IDC侧反向代理配置
# 适用于通过公网连接的场景

worker_processes auto;
worker_rlimit_nofile 65535;
error_log /var/log/nginx/idc_error.log warn;
pid /var/run/nginx/idc.pid;

events {
    worker_connections 8192;
    use epoll;
    multi_accept on;
}

http {
    include /etc/nginx/mime.types;
    default_type application/octet-stream;
    
    # 日志格式 - 记录真实客户端IP
    log_format idc_log '$http_x_original_ip - $remote_user [$time_local] "$request" '
                       '$status $body_bytes_sent "$http_referer" '
                       '"$http_user_agent" '
                       'real_client_ip="$http_x_original_ip" '
                       'gateway_ip="$http_x_gateway_ip" '
                       'forwarded_for="$http_x_forwarded_for" '
                       'user_id="$http_x_user_id" '
                       'client_cert="$http_x_client_cert_verify" '
                       'request_id="$http_x_request_id" '
                       'processing_time=$request_time';
    
    access_log /var/log/nginx/idc_access.log idc_log;
    
    # 基础配置
    sendfile on;
    tcp_nopush on;
    tcp_nodelay on;
    keepalive_timeout 60;
    
    # 支持较大的请求
    client_max_body_size 10m;
    client_body_buffer_size 512k;
    client_body_timeout 30s;
    client_header_timeout 20s;
    
    # 压缩配置
    gzip on;
    gzip_comp_level 4;
    gzip_types text/plain application/json application/xml text/css;
    
    # 云端网关IP白名单
    geo $gateway_allowed {
        default 0;
        
        # 允许的云端网关IP段
        # 阿里云
        47.0.0.0/8 1;
        116.0.0.0/8 1;
        120.0.0.0/8 1;
        
        # 腾讯云
        49.0.0.0/8 1;
        129.0.0.0/8 1;
        140.0.0.0/8 1;
        
        # 华为云
        119.0.0.0/8 1;
        121.0.0.0/8 1;
        
        # 您的云端网关具体IP（需要根据实际情况修改）
        # 123.456.789.0/24 1;
    }
    
    # 获取真实客户端IP的映射
    map $http_x_original_ip $real_client_ip {
        default $http_x_original_ip;
        "" $remote_addr;  # 如果没有X-Original-IP头，使用remote_addr
    }
    
    # 安全限流 - 针对公网连接
    limit_req_zone $binary_remote_addr zone=idc_global:10m rate=100r/s;
    limit_req_zone $http_x_real_ip zone=idc_gateway:10m rate=500r/s;
    limit_conn_zone $binary_remote_addr zone=idc_conn:10m;
    
    # 内部应用服务器集群
    upstream app_servers {
        # 本地应用服务器
        server 10.0.1.10:8080 weight=5 max_fails=2 fail_timeout=10s;
        server 10.0.1.11:8080 weight=5 max_fails=2 fail_timeout=10s;
        server 10.0.1.12:8080 weight=3 max_fails=2 fail_timeout=10s backup;
        
        # 连接池
        keepalive 100;
        keepalive_requests 1000;
        keepalive_timeout 60s;
    }
    
    # 健康检查服务
    server {
        listen 8080;
        server_name localhost;
        
        # 只允许内网和网关访问
        allow 127.0.0.1;
        allow 10.0.0.0/8;
        allow 172.16.0.0/12;
        allow 192.168.0.0/16;
        
        # 允许已认证的云端网关
        if ($gateway_allowed = 0) {
            return 403;
        }
        
        location /health {
            access_log off;
            return 200 "IDC OK\n";
            add_header Content-Type text/plain;
        }
        
        location /idc_status {
            stub_status on;
            access_log off;
            
            # 添加自定义指标
            add_header X-Server-Time $time_iso8601;
            add_header X-IDC-Location "Beijing"; # 根据实际IDC修改
        }
    }
    
    # 主服务 - HTTPS终端
    server {
        listen 443 ssl http2;
        server_name _; # 使用IP接入，不依赖域名
        
        # 严格的来源控制
        if ($gateway_allowed = 0) {
            return 403 "Access denied from $remote_addr";
        }
        
        # SSL配置
        ssl_certificate /etc/nginx/ssl/idc_server.crt;
        ssl_certificate_key /etc/nginx/ssl/idc_server.key;
        
        # 客户端证书验证（网关双向认证）
        ssl_client_certificate /etc/nginx/ssl/gateway_ca.crt;
        ssl_verify_client on; # 强制要求客户端证书
        ssl_verify_depth 2;
        
        # SSL安全配置
        ssl_protocols TLSv1.2 TLSv1.3;
        ssl_ciphers TLS_AES_256_GCM_SHA384:TLS_CHACHA20_POLY1305_SHA256:ECDHE-RSA-AES256-GCM-SHA384;
        ssl_prefer_server_ciphers off;
        ssl_session_cache shared:SSL:10m;
        ssl_session_timeout 10m;
        
        # 安全头部
        add_header Strict-Transport-Security "max-age=31536000" always;
        add_header X-Frame-Options DENY always;
        add_header X-Content-Type-Options nosniff always;
        
        # 限流控制
        limit_req zone=idc_gateway burst=200 nodelay;
        limit_conn idc_conn 50;
        
        # 隐藏服务器信息
        server_tokens off;
        
        # API请求处理
        location /api/ {
            # 验证请求来源（必须来自认证的网关）
            if ($ssl_client_verify != "SUCCESS") {
                return 403 "Invalid client certificate";
            }
            
            # 验证网关传递的用户信息
            if ($http_x_user_id = "") {
                return 400 "Missing user ID";
            }
            
            # 记录详细的请求信息
            set $gateway_ip $http_x_gateway_ip;
            set $original_client_ip $real_client_ip;
            set $user_id $http_x_user_id;
            set $request_trace_id $http_x_request_id;
            
            # 代理到内部应用服务器
            proxy_pass http://app_servers;
            
            # 传递所有重要头部 - 保留真实客户端IP
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $original_client_ip;  # 传递真实客户端IP
            proxy_set_header X-Forwarded-For $http_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto https;
            proxy_set_header X-Original-Client-IP $original_client_ip;  # 原始客户端IP
            proxy_set_header X-Gateway-IP $gateway_ip;  # 网关IP
            proxy_set_header X-IDC-Gateway-IP $remote_addr;  # IDC网关IP
            proxy_set_header X-User-ID $user_id;
            proxy_set_header X-Request-ID $request_trace_id;
            proxy_set_header X-IDC-Location "Beijing"; # 标识当前IDC
            
            # 客户端证书信息传递
            proxy_set_header X-Client-Cert-Subject $ssl_client_s_dn;
            proxy_set_header X-Client-Cert-Fingerprint $ssl_client_fingerprint;
            
            # 超时配置 - 适应内网环境
            proxy_connect_timeout 5s;
            proxy_send_timeout 60s;
            proxy_read_timeout 60s;
            
            # 重试配置
            proxy_next_upstream error timeout http_500 http_502 http_503;
            proxy_next_upstream_tries 2;
            proxy_next_upstream_timeout 10s;
            
            # 缓冲配置
            proxy_buffering on;
            proxy_buffer_size 8k;
            proxy_buffers 16 8k;
            
            # 启用HTTP/1.1持久连接
            proxy_http_version 1.1;
            proxy_set_header Connection "";
            
            # 错误处理
            error_page 502 503 504 @app_error;
        }
        
        # 健康检查接口
        location /idc/health {
            access_log off;
            return 200 '{"status":"healthy","idc":"beijing","timestamp":"$time_iso8601"}';
            add_header Content-Type application/json;
        }
        
        # 监控接口
        location /idc/metrics {
            # 只允许网关访问
            if ($ssl_client_verify != "SUCCESS") {
                return 403;
            }
            
            access_log off;
            
            # 返回IDC指标信息
            content_by_lua_block {
                local cjson = require "cjson"
                local metrics = {
                    idc = "beijing",
                    timestamp = ngx.var.time_iso8601,
                    active_connections = ngx.var.connections_active or 0,
                    total_requests = ngx.var.request_id or 0,
                    load_average = "0.5", -- 可以通过系统调用获取
                    memory_usage = "60%",  -- 可以通过系统调用获取
                    disk_usage = "40%"     -- 可以通过系统调用获取
                }
                ngx.say(cjson.encode(metrics))
            }
        }
        
        # 应用错误处理
        location @app_error {
            internal;
            return 503 '{"error":"Service temporarily unavailable","idc":"beijing","timestamp":"$time_iso8601"}';
            add_header Content-Type application/json;
        }
        
        # 拒绝其他请求
        location / {
            return 404 '{"error":"Not found","idc":"beijing"}';
            add_header Content-Type application/json;
        }
    }
    
    # HTTP重定向到HTTPS
    server {
        listen 80;
        server_name _;
        
        # 也要验证来源IP
        if ($gateway_allowed = 0) {
            return 403;
        }
        
        # 重定向到HTTPS
        return 301 https://$host$request_uri;
    }
    
    # 备用端口服务（用于故障切换）
    server {
        listen 8443 ssl;
        server_name _;
        
        # 相同的SSL和安全配置
        ssl_certificate /etc/nginx/ssl/idc_server.crt;
        ssl_certificate_key /etc/nginx/ssl/idc_server.key;
        ssl_client_certificate /etc/nginx/ssl/gateway_ca.crt;
        ssl_verify_client on;
        
        ssl_protocols TLSv1.2 TLSv1.3;
        ssl_session_cache shared:SSL_BACKUP:5m;
        
        # 同样的安全控制
        if ($gateway_allowed = 0) {
            return 403;
        }
        
        limit_req zone=idc_gateway burst=100;
        
        # 简化的API转发
        location /api/ {
            if ($ssl_client_verify != "SUCCESS") {
                return 403;
            }
            
            proxy_pass http://app_servers;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $real_client_ip;  # 使用真实客户端IP
            proxy_set_header X-Forwarded-For $http_x_forwarded_for;
            proxy_set_header X-Original-Client-IP $real_client_ip;
            proxy_set_header X-User-ID $http_x_user_id;
            proxy_set_header X-Request-ID $http_x_request_id;
            proxy_set_header X-Backup-Mode "true";
            
            proxy_connect_timeout 3s;
            proxy_send_timeout 30s;
            proxy_read_timeout 30s;
        }
        
        location /health {
            return 200 "Backup OK\n";
        }
    }
}

# TCP/UDP代理（如果需要）
stream {
    # MySQL代理示例
    upstream mysql_servers {
        server 10.0.1.20:3306 weight=5;
        server 10.0.1.21:3306 weight=3 backup;
    }
    
    # 控制访问
    map $remote_addr $mysql_allowed {
        default 0;
        ~^47\. 1;  # 云端网关IP段
        ~^10\. 1;  # 内网IP段
    }
    
    server {
        listen 3306;
        
        # 简单的访问控制
        if ($mysql_allowed = 0) {
            return;
        }
        
        proxy_pass mysql_servers;
        proxy_timeout 10s;
        proxy_connect_timeout 3s;
        
        # 限制连接数
        proxy_bind $remote_addr transparent;
    }
    
    # Redis代理示例
    upstream redis_servers {
        server 10.0.1.30:6379;
        server 10.0.1.31:6379 backup;
    }
    
    server {
        listen 6379;
        
        if ($mysql_allowed = 0) {
            return;
        }
        
        proxy_pass redis_servers;
        proxy_timeout 3s;
        proxy_responses 1;
    }
} 