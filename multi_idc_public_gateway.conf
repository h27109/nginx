# 多IDC公网接入网关配置
worker_processes auto;
worker_rlimit_nofile 65535;
error_log /var/log/nginx/error.log warn;
pid /var/run/nginx.pid;

events {
    worker_connections 10240;
    use epoll;
    multi_accept on;
}

http {
    include /etc/nginx/mime.types;
    default_type application/octet-stream;
    
    # 日志格式定义 - 增加安全相关字段
    log_format gateway_log '$remote_addr - $remote_user [$time_local] "$request" '
                          '$status $body_bytes_sent "$http_referer" '
                          '"$http_user_agent" "$http_x_forwarded_for" '
                          'user_id="$user_id" upstream="$upstream_addr" '
                          'response_time=$request_time upstream_time=$upstream_response_time '
                          'ssl_cipher="$ssl_cipher" ssl_protocol="$ssl_protocol" '
                          'client_cert_verify="$ssl_client_verify"';
    
    access_log /var/log/nginx/gateway_access.log gateway_log;
    
    # 基础性能优化
    sendfile on;
    tcp_nopush on;
    tcp_nodelay on;
    keepalive_timeout 30;  # 缩短公网连接保持时间
    client_max_body_size 5m;  # 降低最大请求体大小
    client_body_timeout 15s;  # 缩短超时时间
    client_header_timeout 10s;
    
    # Gzip压缩 - 降低公网传输量
    gzip on;
    gzip_comp_level 6;
    gzip_min_length 1000;
    gzip_types text/plain application/json application/xml text/css text/js application/javascript;
    
    # 严格的限流配置 - 公网需要更严格的控制
    limit_req_zone $binary_remote_addr zone=global_limit:10m rate=50r/s;
    limit_req_zone $user_id zone=user_limit:10m rate=20r/s;
    limit_req_zone $ssl_client_fingerprint zone=cert_limit:10m rate=100r/s;
    
    # 连接限制
    limit_conn_zone $binary_remote_addr zone=conn_limit:10m;
    
    # 定义用户ID提取
    map $request_body $user_id {
        default "";
        "~\"user_id\":\s*\"?([^,\"}\s]+)" $1;
    }
    
    # SSL客户端证书验证结果映射
    map $ssl_client_verify $cert_status {
        SUCCESS "verified";
        FAILED:reason "failed";
        NONE "none";
        default "unknown";
    }
    
    # 实时IP黑名单（可通过API更新）
    geo $blocked_ip {
        default 0;
        # 可以动态更新的IP黑名单
        include /etc/nginx/blocked_ips.conf;
    }
    
    # IDC1 - 北京机房 (公网IP HTTPS)
    upstream idc_beijing_public {
        json_hash user_id consistent;
        
        # 使用公网IP和HTTPS端口
        server 123.125.114.144:443 weight=5 max_fails=2 fail_timeout=10s;  # 北京主IP
        server 124.126.115.145:443 weight=3 max_fails=2 fail_timeout=10s backup;  # 北京备IP
        
        # 更短的连接保持时间，适应公网环境
        keepalive 50;
        keepalive_requests 100;
        keepalive_timeout 30s;
    }
    
    # IDC2 - 上海机房 (公网IP HTTPS)
    upstream idc_shanghai_public {
        json_hash user_id consistent;
        
        server 140.207.54.76:443 weight=5 max_fails=2 fail_timeout=10s;   # 上海主IP
        server 141.208.55.77:443 weight=3 max_fails=2 fail_timeout=10s backup;   # 上海备IP
        
        keepalive 50;
        keepalive_requests 100;
        keepalive_timeout 30s;
    }
    
    # IDC3 - 深圳机房 (公网IP HTTPS)
    upstream idc_shenzhen_public {
        json_hash user_id consistent;
        
        server 183.232.231.172:443 weight=5 max_fails=2 fail_timeout=10s; # 深圳主IP
        server 184.233.232.173:443 weight=3 max_fails=2 fail_timeout=10s backup; # 深圳备IP
        
        keepalive 50;
        keepalive_requests 100;
        keepalive_timeout 30s;
    }
    
    # 全局后备upstream - 多运营商线路
    upstream idc_global_fallback {
        # 电信线路
        server 123.125.114.144:443 weight=3;  # 北京电信
        server 140.207.54.76:443 weight=3;    # 上海电信
        
        # 联通线路
        server 123.125.114.146:443 weight=2;  # 北京联通
        server 140.207.54.78:443 weight=2;    # 上海联通
        
        # 移动线路
        server 183.232.231.174:443 weight=2;  # 深圳移动
    }
    
    # 按用户ID和网络质量智能分片
    map $user_id $target_idc {
        default "auto";
        # 用户ID分片 + 就近接入
        "~^[0369]" "beijing";
        "~.*[0369]$" "beijing"; 
        "~^[147]" "shanghai";
        "~.*[147]$" "shanghai";
        "~^[258]" "shenzhen";
        "~.*[258]$" "shenzhen";
    }
    
    # 根据客户端IP进行就近路由优化
    geo $client_region {
        default "unknown";
        
        # 华北地区IP段 -> 北京
        1.0.0.0/8 "beijing";
        36.0.0.0/8 "beijing";
        39.0.0.0/8 "beijing";
        42.0.0.0/8 "beijing";
        
        # 华东地区IP段 -> 上海
        58.0.0.0/8 "shanghai";
        60.0.0.0/8 "shanghai";
        61.0.0.0/8 "shanghai";
        
        # 华南地区IP段 -> 深圳
        14.0.0.0/8 "shenzhen";
        27.0.0.0/8 "shenzhen";
        183.0.0.0/8 "shenzhen";
    }
    
    # 健康检查和监控服务器
    server {
        listen 8080;
        server_name localhost;
        
        # 只允许内网访问
        allow 127.0.0.1;
        allow 10.0.0.0/8;
        allow 172.16.0.0/12;
        allow 192.168.0.0/16;
        deny all;
        
        location /health {
            access_log off;
            return 200 "healthy\n";
            add_header Content-Type text/plain;
        }
        
        location /nginx_status {
            stub_status on;
            access_log off;
        }
        
        # 动态更新IP黑名单
        location /admin/block_ip {
            content_by_lua_block {
                local ip = ngx.var.arg_ip
                if ip then
                    local file = io.open("/etc/nginx/blocked_ips.conf", "a")
                    file:write(ip .. " 1;\n")
                    file:close()
                    ngx.say("IP " .. ip .. " blocked")
                else
                    ngx.say("No IP specified")
                end
            }
        }
    }
    
    # 主服务配置 - 强化安全
    server {
        listen 80;
        listen 443 ssl http2;
        server_name gateway.yourcompany.com;
        
        # 阻止已知恶意IP
        if ($blocked_ip) {
            return 403;
        }
        
        # 强制HTTPS
        if ($scheme != "https") {
            return 301 https://$server_name$request_uri;
        }
        
        # 增强的SSL配置
        ssl_certificate /etc/nginx/ssl/gateway.crt;
        ssl_certificate_key /etc/nginx/ssl/gateway.key;
        
        # 客户端证书验证（可选，用于API认证）
        ssl_client_certificate /etc/nginx/ssl/client_ca.crt;
        ssl_verify_client optional;
        ssl_verify_depth 2;
        
        # 现代SSL配置
        ssl_protocols TLSv1.2 TLSv1.3;
        ssl_ciphers ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384;
        ssl_prefer_server_ciphers off;
        ssl_session_cache shared:SSL:10m;
        ssl_session_timeout 10m;
        
        # HSTS和安全头
        add_header Strict-Transport-Security "max-age=31536000; includeSubDomains" always;
        add_header X-Frame-Options DENY always;
        add_header X-Content-Type-Options nosniff always;
        add_header X-XSS-Protection "1; mode=block" always;
        add_header Referrer-Policy "strict-origin-when-cross-origin" always;
        
        # 严格限流
        limit_req zone=global_limit burst=100 nodelay;
        limit_req zone=user_limit burst=50 nodelay;
        limit_conn conn_limit 20;
        
        # 隐藏服务器信息
        server_tokens off;
        more_clear_headers Server;
        
        # API路由 - 增强安全验证
        location /api/ {
            # API密钥验证
            set $api_key_valid 0;
            if ($http_x_api_key ~ "^[a-zA-Z0-9]{32}$") {
                set $api_key_valid 1;
            }
            
            # 对于敏感操作要求客户端证书
            if ($request_uri ~ "/api/(admin|sensitive)/") {
                if ($ssl_client_verify != "SUCCESS") {
                    return 403 "Client certificate required";
                }
            }
            
            # 确保读取完整请求体
            client_body_in_file_only clean;
            client_body_buffer_size 512k;
            
            # 根据用户ID和地理位置智能路由
            set $chosen_idc $target_idc;
            if ($target_idc = "auto") {
                set $chosen_idc $client_region;
            }
            
            # 路由到目标IDC
            if ($chosen_idc = "beijing") {
                proxy_pass https://idc_beijing_public;
            }
            if ($chosen_idc = "shanghai") {
                proxy_pass https://idc_shanghai_public;
            }
            if ($chosen_idc = "shenzhen") {
                proxy_pass https://idc_shenzhen_public;
            }
            if ($chosen_idc ~ "(unknown|auto)") {
                proxy_pass https://idc_global_fallback;
            }
            
            # 增强的代理配置
            proxy_ssl_verify on;
            proxy_ssl_trusted_certificate /etc/nginx/ssl/idc_ca.crt;
            proxy_ssl_protocols TLSv1.2 TLSv1.3;
            proxy_ssl_ciphers HIGH:!aNULL:!MD5;
            
            # 传递客户端证书信息
            proxy_set_header X-Client-Cert-Verify $ssl_client_verify;
            proxy_set_header X-Client-Cert-Subject $ssl_client_s_dn;
            proxy_set_header X-Client-Cert-Fingerprint $ssl_client_fingerprint;
            
            # 标准代理头 - 保留真实客户端IP
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_set_header X-Original-IP $remote_addr;  # 保存原始客户端IP
            proxy_set_header X-Gateway-IP $server_addr;   # 网关自身IP
            proxy_set_header X-User-ID $user_id;
            proxy_set_header X-Target-IDC $chosen_idc;
            proxy_set_header X-Request-ID $request_id;
            
            # 公网环境的超时设置（更短）
            proxy_connect_timeout 3s;
            proxy_send_timeout 30s;
            proxy_read_timeout 30s;
            
            # 积极的重试策略
            proxy_next_upstream error timeout http_500 http_502 http_503 http_504;
            proxy_next_upstream_tries 3;
            proxy_next_upstream_timeout 8s;
            
            # 缓冲配置
            proxy_buffering on;
            proxy_buffer_size 4k;
            proxy_buffers 8 4k;
            
            # 错误处理
            error_page 502 503 504 =200 @fallback;
            
            # 请求体大小限制
            client_max_body_size 2m;
        }
        
        # WebSocket支持（如果需要）
        location /ws/ {
            proxy_pass https://idc_global_fallback;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "upgrade";
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            
            # WebSocket特定超时
            proxy_read_timeout 3600s;
            proxy_send_timeout 3600s;
        }
        
        # 全局故障切换
        location @fallback {
            internal;
            proxy_pass https://idc_global_fallback;
            proxy_ssl_verify off;  # 故障情况下放宽SSL验证
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Original-IP $remote_addr;  # 保留原始IP
            proxy_set_header X-Gateway-IP $server_addr;   # 网关IP
            proxy_set_header X-Fallback "true";
            proxy_set_header X-Request-ID $request_id;
        }
        
        # 健康检查接口
        location /gateway/health {
            access_log off;
            return 200 "Gateway OK";
            add_header Content-Type text/plain;
        }
        
        # 拒绝所有其他请求
        location / {
            return 404;
        }
    }
    
    # 专门的监控服务器（内网）
    server {
        listen 8081;
        server_name monitoring.internal;
        
        allow 10.0.0.0/8;
        allow 172.16.0.0/12;
        allow 192.168.0.0/16;
        deny all;
        
        location /metrics {
            content_by_lua_block {
                -- 输出Prometheus格式指标
                ngx.say("# HELP nginx_requests_total Total requests")
                ngx.say("# TYPE nginx_requests_total counter")
                ngx.say("nginx_requests_total ", ngx.var.request_id or 0)
            }
        }
        
        location /debug {
            content_by_lua_block {
                ngx.say("Debug Info:")
                ngx.say("Remote IP: ", ngx.var.remote_addr)
                ngx.say("User ID: ", ngx.var.user_id or "N/A")
                ngx.say("Target IDC: ", ngx.var.target_idc or "N/A")
                ngx.say("Client Region: ", ngx.var.client_region or "N/A")
                ngx.say("SSL Verify: ", ngx.var.ssl_client_verify or "N/A")
            }
        }
    }
}

# Stream模块 - 支持TCP代理（如果需要）
stream {
    # 为TCP连接定义限流
    limit_conn_zone $binary_remote_addr zone=tcp_conn_limit:10m;
    
    upstream tcp_idc_beijing {
        server beijing.yourdomain.com:3306 weight=5 max_fails=2 fail_timeout=10s;
    }
    
    upstream tcp_idc_shanghai {
        server shanghai.yourdomain.com:3306 weight=5 max_fails=2 fail_timeout=10s;
    }
    
    # MySQL代理（使用SSL）
    server {
        listen 3306 ssl;
        ssl_certificate /etc/nginx/ssl/gateway.crt;
        ssl_certificate_key /etc/nginx/ssl/gateway.key;
        ssl_protocols TLSv1.2 TLSv1.3;
        
        proxy_pass tcp_idc_beijing;
        proxy_timeout 10s;
        proxy_connect_timeout 3s;
        
        limit_conn tcp_conn_limit 100;
    }
} 