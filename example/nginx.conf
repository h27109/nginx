# nginx.conf 示例配置
# 展示 nginx upstream json hash 模块的各种配置选项

# 性能调优建议和最佳实践配置
#
# 以下配置展示了针对不同场景的性能优化建议

#================================
# 高性能配置 (推荐用于生产环境)
#================================
upstream backend_high_performance {
    # 使用CRC32算法，性能最佳
    json_hash user_id;
    json_hash_method crc32;
    json_hash_virtual_nodes 160;         # 默认值，平衡性能与分布
    json_hash_max_depth 16;              # 限制JSON深度，防止攻击（0表示无限制）
    json_hash_check_content_type on;     # 启用Content-Type检查
    json_hash_fallback_key "default";    # 提取失败时的备用哈希键
    
    server 192.168.1.10:8080 weight=3;
    server 192.168.1.11:8080 weight=2;
    server 192.168.1.12:8080 weight=1;
}

#================================  
# 高分布均匀性配置 (数据分布要求高)
#================================
upstream backend_high_distribution {
    json_hash user_id consistent;
    json_hash_method murmur3;            # MurmurHash3分布更均匀
    json_hash_virtual_nodes 500;         # 增加虚拟节点提高分布均匀性
    json_hash_max_depth 32;              # 标准JSON深度限制
    json_hash_check_content_type on;
    
    server 192.168.2.10:8080;
    server 192.168.2.11:8080;
    server 192.168.2.12:8080;
    server 192.168.2.13:8080;
}

#================================
# 高安全性配置 (金融/敏感数据)
#================================
upstream backend_high_security {
    json_hash user_id consistent;
    json_hash_method crc32;              # 使用经过验证的算法
    json_hash_virtual_nodes 160;
    json_hash_max_depth 8;               # 严格限制JSON深度
    json_hash_check_content_type on;     # 强制Content-Type检查
    
    server 192.168.3.10:8080;
    server 192.168.3.11:8080;
}

#================================
# 大规模集群配置 (100+服务器)
#================================
upstream backend_large_cluster {
    json_hash user_id consistent;
    json_hash_method murmur3;            # 大规模时MurmurHash3表现更好
    json_hash_virtual_nodes 1000;        # 大集群需要更多虚拟节点
    json_hash_max_depth 20;
    json_hash_check_content_type off;    # 大规模时可关闭以提升性能
    
    # 模拟大规模服务器配置
    server 192.168.4.10:8080 weight=2;
    server 192.168.4.11:8080 weight=2;
    server 192.168.4.12:8080 weight=2;
    # ... 更多服务器
}

#================================
# 测试和开发配置
#================================
upstream backend_development {
    json_hash user_id;                   # 使用默认配置
    json_hash_method crc32;
    json_hash_virtual_nodes 40;          # 减少虚拟节点节省内存
    json_hash_max_depth 100;             # 开发时允许更深的JSON
    json_hash_check_content_type off;    # 开发时关闭严格检查
    
    server 127.0.0.1:8080;
    server 127.0.0.1:8081;
}

http {
    include       /etc/nginx/mime.types;
    default_type  application/octet-stream;

    # 日志格式
    log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                    '$status $body_bytes_sent "$http_referer" '
                    '"$http_user_agent" "$http_x_forwarded_for" '
                    'upstream_addr="$upstream_addr" '
                    'upstream_response_time="$upstream_response_time"';

    access_log /var/log/nginx/access.log main;
    error_log  /var/log/nginx/error.log;

    # 基本配置
    sendfile        on;
    tcp_nopush      on;
    tcp_nodelay     on;
    keepalive_timeout  65;
    types_hash_max_size 2048;

    # 客户端最大请求体大小
    client_max_body_size 10m;

    # 示例1: 基本JSON哈希配置
    upstream api_servers_basic {
        json_hash user_id;  # 基于 user_id 字段进行哈希分流
        
        server 192.168.1.10:8080 weight=1;
        server 192.168.1.11:8080 weight=1;
        server 192.168.1.12:8080 weight=2;
    }

    # 示例2: 一致性哈希配置
    upstream api_servers_consistent {
        json_hash user_id consistent;  # 启用一致性哈希
        json_hash_virtual_nodes 200;   # 每个server创建200个虚拟节点
        json_hash_method murmur3;      # 使用MurmurHash3算法
        
        server 192.168.1.10:8080;
        server 192.168.1.11:8080;
        server 192.168.1.12:8080;
        server 192.168.1.13:8080;
    }

    # 示例3: 高级安全配置
    upstream api_servers_secure {
        json_hash user_id;
        json_hash_max_depth 10;              # 限制JSON最大嵌套深度
        json_hash_check_content_type on;     # 检查Content-Type
        json_hash_method crc32;              # 使用CRC32算法
        
        server 192.168.2.10:8080 max_fails=3 fail_timeout=30s;
        server 192.168.2.11:8080 max_fails=3 fail_timeout=30s;
        server 192.168.2.12:8080 backup;    # 备用服务器
    }

    # 示例4: 多IDC配置
    upstream idc_beijing {
        json_hash user_id consistent;
        json_hash_virtual_nodes 150;
        json_hash_method murmur3;
        
        server 10.1.1.10:8080;
        server 10.1.1.11:8080;
        server 10.1.1.12:8080;
    }

    upstream idc_shanghai {
        json_hash user_id consistent;
        json_hash_virtual_nodes 150;
        json_hash_method murmur3;
        
        server 10.2.1.10:8080;
        server 10.2.1.11:8080;
        server 10.2.1.12:8080;
    }

    # 服务器配置
    server {
        listen 80;
        server_name api.example.com;

        # 健康检查端点
        location /health {
            access_log off;
            return 200 "OK\n";
            add_header Content-Type text/plain;
        }

        # 高性能场景配置
        location /api/v1/ {
            proxy_pass http://backend_high_performance;
            
            # 性能优化设置
            proxy_buffering on;
            proxy_buffer_size 64k;
            proxy_buffers 8 64k;
            proxy_busy_buffers_size 128k;
            
            # 超时设置
            proxy_connect_timeout 5s;
            proxy_send_timeout 10s;
            proxy_read_timeout 10s;
            
            # 请求体大小限制（配合模块的1MB限制）
            client_max_body_size 1m;
            
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        }

        # 高分布均匀性场景
        location /api/v2/ {
            proxy_pass http://backend_high_distribution;
            
            # 针对一致性哈希的特殊设置
            proxy_next_upstream error timeout http_500 http_502 http_503;
            proxy_next_upstream_tries 2;
            proxy_next_upstream_timeout 10s;
            
            client_max_body_size 1m;
            
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        }

        # 金融/高安全场景
        location /api/secure/ {
            proxy_pass http://backend_high_security;
            
            # 安全相关设置
            client_body_buffer_size 32k;        # 较小的缓冲区
            client_max_body_size 512k;          # 更严格的大小限制
            
            # 更严格的超时设置
            proxy_connect_timeout 3s;
            proxy_send_timeout 5s;
            proxy_read_timeout 5s;
            
            # 限制重试减少安全风险
            proxy_next_upstream_tries 1;
            
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        }

        # 大规模集群场景
        location /api/scale/ {
            proxy_pass http://backend_large_cluster;
            
            # 大规模优化设置
            proxy_buffering on;
            proxy_buffer_size 128k;             # 更大的缓冲区
            proxy_buffers 16 128k;
            proxy_busy_buffers_size 256k;
            
            # 连接池优化
            proxy_http_version 1.1;
            proxy_set_header Connection "";
            
            client_max_body_size 2m;            # 大规模时允许更大请求
            
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        }

        # 开发测试场景
        location /api/dev/ {
            proxy_pass http://backend_development;
            
            # 开发友好设置
            proxy_buffering off;                # 关闭缓冲便于调试
            client_max_body_size 10m;          # 开发时允许大文件
            
            # 较长的超时便于调试
            proxy_connect_timeout 30s;
            proxy_send_timeout 30s; 
            proxy_read_timeout 30s;
            
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        }

        # 地域路由示例
        location /api/geo/ {
            # 根据客户端IP或其他条件选择不同的upstream
            set $backend "idc_beijing";
            
            # 如果是上海地区的IP，路由到上海IDC
            if ($remote_addr ~* "^10\.2\.") {
                set $backend "idc_shanghai";
            }
            
            proxy_pass http://$backend;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        }

        # 错误页面
        error_page 404 /404.html;
        error_page 500 502 503 504 /50x.html;
        
        location = /50x.html {
            root /usr/share/nginx/html;
        }
    }

    # HTTPS配置示例
    server {
        listen 443 ssl http2;
        server_name api.example.com;

        # SSL证书配置
        ssl_certificate     /etc/nginx/ssl/api.example.com.crt;
        ssl_certificate_key /etc/nginx/ssl/api.example.com.key;
        
        # SSL安全配置
        ssl_protocols TLSv1.2 TLSv1.3;
        ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384;
        ssl_prefer_server_ciphers off;
        ssl_session_cache shared:SSL:10m;
        ssl_session_timeout 10m;

        # 与HTTP配置相同的location块
        location /api/v1/ {
            proxy_pass http://api_servers_basic;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }

        location /api/v2/ {
            proxy_pass http://api_servers_consistent;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }
    }

    # 监控和管理接口
    server {
        listen 8080;
        server_name localhost;
        
        # 只允许内网访问
        allow 127.0.0.1;
        allow 10.0.0.0/8;
        allow 172.16.0.0/12;
        allow 192.168.0.0/16;
        deny all;

        # nginx状态信息
        location /nginx_status {
            stub_status on;
            access_log off;
        }

        # upstream状态信息（需要nginx-plus或第三方模块）
        location /upstream_status {
            # upstream_show;
            return 200 "Upstream status endpoint\n";
            add_header Content-Type text/plain;
        }
    }
}

# 全局配置
events {
    worker_connections 1024;
    use epoll;
    multi_accept on;
}

# 进程配置
user nginx;
worker_processes auto;
pid /run/nginx.pid;

# 包含其他配置文件
include /etc/nginx/conf.d/*.conf; 

#================================
# 性能调优总结:
#================================
# 
# 1. 算法选择:
#    - CRC32: 最高性能，适合高QPS场景
#    - MurmurHash3: 更好分布，适合数据一致性要求高的场景
#
# 2. 虚拟节点数:
#    - 小集群(2-10台): 40-160个虚拟节点
#    - 中等集群(10-50台): 160-500个虚拟节点  
#    - 大集群(50+台): 500-1000个虚拟节点
#
# 3. JSON深度限制:
#    - 高安全: 8层以下
#    - 一般场景: 16-32层
#    - 开发测试: 可以放宽到100层
#
# 4. Content-Type检查:
#    - 生产环境: 建议开启
#    - 高性能场景: 可以关闭节省CPU
#    - 开发环境: 可以关闭便于测试
#
# 5. 内存使用估算:
#    - 每个虚拟节点约消耗40字节内存
#    - 1000个虚拟节点约消耗40KB内存
#    - 大规模部署时需要监控内存使用
#================================ 